--
-- Project Euler
--
-- Problem #12
-- Highly divisible triangular number
--
--   The sequence of triangle numbers is generated by adding
--   the natural numbers. So the 7th triangle number would be:
--
--     1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
--
--   The first ten terms would be:
--
--     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
--   Let us list the factors of the first seven
--   triangle numbers:
--
--      1: 1
--      3: 1,3
--      6: 1,2,3,6
--     10: 1,2,5,10
--     15: 1,3,5,15
--     21: 1,3,7,21
--     28: 1,2,4,7,14,28
--
--   We can see that 28 is the first triangle number to have
--   over five divisors.
--
--   What is the value of the first triangle number to have
--   over five hundred divisors?
--
-- Answer: ??
--


module Main (
  main
) where


--
-- Get divisors of an integer
--
-- Partially taken from:
-- http://stackoverflow.com/a/1480620/552766
--
divisors :: Int -> [Int]
divisors 0 = [0]
divisors 1 = [1]
divisors n = (1 : builder) ++ (n : [])
  where
    builder = filter ((==0) . rem n) [2..(div n 2)]


--
-- Get triangles
--
triangles = scanl1 (+) [1..]


findNum x = filter isLength triDivs
  where isLength xs = (length xs) >= x

--
-- Solve
--
solve :: Int
solve = x
  where x = 500


triDivs = map divisors triangles
        

--
-- Main
--
main :: IO ()
main = do
  let out = solve;
  print out;


