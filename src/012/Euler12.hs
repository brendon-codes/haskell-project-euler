--
-- Project Euler
--
-- Problem #12
-- Highly divisible triangular number
--
--   The sequence of triangle numbers is generated by adding
--   the natural numbers. So the 7th triangle number would be:
--
--     1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
--
--   The first ten terms would be:
--
--     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
--   Let us list the factors of the first seven
--   triangle numbers:
--
--      1: 1
--      3: 1,3
--      6: 1,2,3,6
--     10: 1,2,5,10
--     15: 1,3,5,15
--     21: 1,3,7,21
--     28: 1,2,4,7,14,28
--
--   We can see that 28 is the first triangle number to have
--   over five divisors.
--
--   What is the value of the first triangle number to have
--   over five hundred divisors?
--
-- Answer: 76576500
--


module Main (
  main
) where


import Data.List
  
--
-- Get prime factors.
-- I did not invent this.
--
-- This was taken from:
-- http://www.haskell.org/haskellwiki/Euler_problems/1_to_10#Problem_3
--
primeFactors :: Int -> [Int]
primeFactors n = factor n primes
  where
    primes = 2 : filter ((==1) . length . primeFactors) [3,5..]
    factor n (p:ps) 
        | p*p > n        = [n]
        | n `mod` p == 0 = p : factor (n `div` p) (p:ps)
        | otherwise      = factor n ps


--
-- Get number of divisors of an integer
--
nDivisors :: Int -> Int
nDivisors 0 = 0
nDivisors 1 = 1
nDivisors n = out
  where
    p = primeFactors n
    g = group p
    exps = map length g
    inc = map (+1) exps
    out = product inc


--
-- Get triangles
--
triangles :: [Int]
triangles = scanl1 (+) [1..]


--
-- Map number of divisors to triangles
--
triNDivs = map out triangles
  where
    out t = (t, nDivisors t)


--
-- Find first triangle with n == x
--
findNum x = out
  where
    out = fst $ head b
    b = filter finder triNDivs
    finder (t, nod) = (nod > x)


--
-- Solve
--
solve :: Int
solve = findNum x
  where x = 500
        

--
-- Main
--
main :: IO ()
main = do
  let out = solve;
  print out;


